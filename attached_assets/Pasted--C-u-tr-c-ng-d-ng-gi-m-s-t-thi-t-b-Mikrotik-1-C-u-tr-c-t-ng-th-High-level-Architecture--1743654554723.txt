# Cấu trúc ứng dụng giám sát thiết bị Mikrotik

## 1. Cấu trúc tổng thể (High-level Architecture)

### 1.1 Mô hình phân lớp
```
┌───────────────────────────────────────────────────────────┐
│                   Presentation Layer                      │
│  (Web UI, Mobile App, API Gateway, Notification System)   │
└───────────────────┬───────────────────────────────────────┘
                    │
┌───────────────────▼───────────────────────────────────────┐
│                   Application Layer                       │
│  (Business Logic, Device Management, Alert Management)    │
└───────────────────┬───────────────────────────────────────┘
                    │
┌───────────────────▼───────────────────────────────────────┐
│                     Data Layer                            │
│  (Data Processing, Analytics, Storage)                    │
└───────────────────┬───────────────────────────────────────┘
                    │
┌───────────────────▼───────────────────────────────────────┐
│                Collection Layer                           │
│  (Distributed Collectors, Polling Engines, Agents)        │
└───────────────────┬───────────────────────────────────────┘
                    │
┌───────────────────▼───────────────────────────────────────┐
│                  Device Layer                             │
│  (Mikrotik Routers with ISD)                             │
└───────────────────────────────────────────────────────────┘
```

### 1.2 Mô hình triển khai vật lý
```
┌─────────────────┐   ┌─────────────────┐   ┌─────────────────┐
│   Web Servers   │◄─►│ Application     │◄─►│  Database       │
│   (Load-        │   │ Servers         │   │  Cluster        │
│   balanced)     │   │                 │   │                 │
└─────────────────┘   └────────┬────────┘   └─────────────────┘
                              │    ▲
                              ▼    │
┌─────────────────┐   ┌─────────────────┐   ┌─────────────────┐
│  Message Queue  │◄─►│  Collector      │◄─►│  Time-Series    │
│  (Kafka/        │   │  Manager        │   │  Database       │
│   RabbitMQ)     │   │                 │   │  (InfluxDB)     │
└─────────────────┘   └────────┬────────┘   └─────────────────┘
                              │
     ┌───────────────────┬────┴────┬───────────────────┐
     ▼                   ▼         ▼                   ▼
┌──────────┐       ┌──────────┐    ┌──────────┐       ┌──────────┐
│Collector │       │Collector │    │Collector │       │Collector │
│  Node 1  │       │  Node 2  │    │  Node 3  │       │  Node N  │
└────┬─────┘       └────┬─────┘    └────┬─────┘       └────┬─────┘
     │                  │               │                  │
     ▼                  ▼               ▼                  ▼
┌──────────┐       ┌──────────┐    ┌──────────┐       ┌──────────┐
│Mikrotik  │       │Mikrotik  │    │Mikrotik  │       │Mikrotik  │
│Devices   │       │Devices   │    │Devices   │       │Devices   │
│Group 1   │       │Group 2   │    │Group 3   │       │Group N   │
└──────────┘       └──────────┘    └──────────┘       └──────────┘
```

## 2. Cấu trúc logic (Logical Structure)

### 2.1 Mô hình thành phần
```
┌───────────────────────────────────────────────────────────────────────┐
│                       Core Application Components                     │
├─────────────────┬─────────────────┬─────────────────┬─────────────────┤
│ Device          │ Configuration   │ Monitoring      │ Security        │
│ Management      │ Management      │ Engine          │ Analysis        │
├─────────────────┼─────────────────┼─────────────────┼─────────────────┤
│ Alert           │ Reporting       │ Analytics       │ User            │
│ Management      │ Engine          │ Engine          │ Management      │
└─────────────────┴─────────────────┴─────────────────┴─────────────────┘
┌───────────────────────────────────────────────────────────────────────┐
│                       Support Services                                │
├─────────────────┬─────────────────┬─────────────────┬─────────────────┤
│ Authentication  │ Logging         │ Queue           │ Scheduler       │
│ & Authorization │ Service         │ Service         │ Service         │
├─────────────────┼─────────────────┼─────────────────┼─────────────────┤
│ Cache           │ API             │ Notification    │ Backup          │
│ Service         │ Gateway         │ Service         │ Service         │
└─────────────────┴─────────────────┴─────────────────┴─────────────────┘
```

### 2.2 Luồng dữ liệu
```
┌───────────────┐  Polling   ┌───────────────┐  Raw Data   ┌───────────────┐
│   Mikrotik    │─────────►  │   Collector   │─────────►   │ Data          │
│   Devices     │            │   Services    │             │ Processors    │
└───────────────┘            └───────────────┘             └───────┬───────┘
                                                                  │
                                                                  ▼
┌───────────────┐             ┌───────────────┐             ┌─────▼───────┐
│  Dashboard &  │   Query     │  API          │   Query     │ Storage     │
│  Reports      │◄──────────  │  Services     │◄──────────  │ Layer       │
└───────────────┘             └───────────────┘             └─────┬───────┘
      ▲                              ▲                            │
      │                              │                            ▼
      │                        ┌─────┴───────┐             ┌───────────────┐
      └────────────────────────┤ Alert       │◄────────────┤ Analysis      │
                               │ Engine      │             │ Engine        │
                               └─────────────┘             └───────────────┘
```

### 2.3 Mô hình quy trình
```
┌─────────────┐     ┌─────────────┐     ┌─────────────┐     ┌─────────────┐
│  Discovery  │────►│ Collection  │────►│ Processing  │────►│  Storage    │
└─────────────┘     └─────────────┘     └─────────────┘     └─────────────┘
                                                                   │
┌─────────────┐     ┌─────────────┐     ┌─────────────┐           │
│ Reporting & │◄────┤  Alerting   │◄────┤  Analysis   │◄──────────┘
│ Dashboard   │     │             │     │             │
└─────────────┘     └─────────────┘     └─────────────┘
```

## 3. Cấu trúc file (File Structure)

### 3.1 Back-end (NodeJS Example)
```
/monitoring-app
├── /src
│   ├── /api                  # API endpoints
│   │   ├── /routes           # Route definitions
│   │   ├── /controllers      # Request handlers
│   │   ├── /middlewares      # API middlewares
│   │   └── /validators       # Request validation
│   │
│   ├── /services             # Business logic services
│   │   ├── /device           # Device management services
│   │   ├── /collection       # Data collection services
│   │   ├── /alert            # Alert management services
│   │   ├── /report           # Report generation services
│   │   ├── /security         # Security analysis services
│   │   └── /notification     # Notification services
│   │
│   ├── /models               # Data models
│   │   ├── /device           # Device models
│   │   ├── /alert            # Alert models
│   │   ├── /user             # User models
│   │   └── /report           # Report models
│   │
│   ├── /utils                # Utility functions
│   │   ├── /logger.js        # Logging utility
│   │   ├── /validator.js     # Validation helpers
│   │   └── /formatter.js     # Data formatters
│   │
│   ├── /config               # Configuration files
│   │   ├── /database.js      # Database configuration
│   │   ├── /app.js           # Application configuration
│   │   └── /collector.js     # Collector configuration
│   │
│   ├── /loaders              # Application bootstrappers
│   │   ├── /express.js       # Express loader
│   │   ├── /mongoose.js      # MongoDB loader
│   │   └── /redis.js         # Redis loader
│   │
│   ├── /collectors           # Collection modules
│   │   ├── /snmp             # SNMP collection
│   │   ├── /api              # API collection
│   │   └── /ssh              # SSH collection
│   │
│   ├── /schedulers           # Scheduler services
│   │   ├── /polling.js       # Polling scheduler
│   │   ├── /reports.js       # Reports scheduler
│   │   └── /maintenance.js   # Maintenance scheduler
│   │
│   ├── /analysis             # Data analysis modules
│   │   ├── /traffic          # Traffic analysis
│   │   ├── /security         # Security analysis
│   │   └── /performance      # Performance analysis
│   │
│   └── app.js                # Application entry point
│
├── /tests                    # Automated tests
│   ├── /unit                 # Unit tests
│   ├── /integration          # Integration tests
│   └── /e2e                  # End-to-end tests
│
├── /scripts                  # Utility scripts
│   ├── /setup.js             # Setup script
│   └── /seed.js              # Database seeding
│
├── /docs                     # Documentation
│   ├── /api                  # API documentation
│   └── /deployment           # Deployment guides
│
├── package.json              # Project dependencies
├── .env                      # Environment variables
├── .gitignore                # Git ignore file
└── README.md                 # Project readme
```

### 3.2 Collector Agent (Python Example)
```
/collector-agent
├── /src
│   ├── /collectors           # Collection modules
│   │   ├── /snmp_collector.py  # SNMP collection logic
│   │   ├── /api_collector.py   # API collection logic
│   │   └── /ssh_collector.py   # SSH collection logic
│   │
│   ├── /processors           # Data processors
│   │   ├── /normalizer.py    # Data normalization
│   │   ├── /aggregator.py    # Data aggregation
│   │   └── /filter.py        # Data filtering
│   │
│   ├── /connectors           # Backend connectors
│   │   ├── /http_sender.py   # HTTP API client
│   │   ├── /queue_sender.py  # Message queue client
│   │   └── /local_cache.py   # Local caching
│   │
│   ├── /utils                # Utility functions
│   │   ├── /logger.py        # Logging utility
│   │   ├── /config.py        # Configuration handler
│   │   └── /security.py      # Security utilities
│   │
│   ├── /models               # Data models
│   │   ├── /device.py        # Device model
│   │   ├── /metric.py        # Metric model
│   │   └── /task.py          # Task model
│   │
│   ├── /schedulers           # Scheduling logic
│   │   ├── /task_manager.py  # Task management
│   │   └── /scheduler.py     # Scheduling engine
│   │
│   └── main.py               # Application entry point
│
├── /config                   # Configuration files
│   ├── /collector.yaml       # Collector configuration
│   └── /logging.yaml         # Logging configuration
│
├── /tests                    # Automated tests
│   ├── /unit                 # Unit tests
│   └── /integration          # Integration tests
│
├── /scripts                  # Utility scripts
│   ├── /install.sh           # Installation script
│   └── /service.sh           # Service management
│
├── requirements.txt          # Python dependencies
├── setup.py                  # Package setup
└── README.md                 # Project readme
```

### 3.3 Front-end (React.js Example)
```
/frontend-app
├── /public                   # Public assets
│   ├── index.html            # HTML entry point
│   ├── favicon.ico           # Favicon
│   └── /assets               # Static assets
│
├── /src
│   ├── /components           # React components
│   │   ├── /layout           # Layout components
│   │   │   ├── Header.jsx    # Header component
│   │   │   ├── Sidebar.jsx   # Sidebar component
│   │   │   └── Footer.jsx    # Footer component
│   │   │
│   │   ├── /dashboard        # Dashboard components
│   │   │   ├── Overview.jsx  # Overview component
│   │   │   ├── DeviceStatus.jsx # Device status component
│   │   │   └── AlertWidget.jsx # Alert widget
│   │   │
│   │   ├── /devices          # Device management components
│   │   │   ├── DeviceList.jsx  # Device list
│   │   │   ├── DeviceDetail.jsx # Device details
│   │   │   └── DeviceForm.jsx  # Device form
│   │   │
│   │   ├── /alerts           # Alert components
│   │   │   ├── AlertList.jsx # Alert list
│   │   │   └── AlertDetail.jsx # Alert details
│   │   │
│   │   ├── /reports          # Report components
│   │   │   ├── ReportList.jsx # Report list
│   │   │   └── ReportViewer.jsx # Report viewer
│   │   │
│   │   ├── /charts           # Chart components
│   │   │   ├── BandwidthChart.jsx # Bandwidth chart
│   │   │   ├── TopologyMap.jsx # Network topology map
│   │   │   └── PerformanceChart.jsx # Performance chart
│   │   │
│   │   └── /common           # Common components
│   │       ├── Button.jsx    # Button component
│   │       ├── Card.jsx      # Card component
│   │       └── Table.jsx     # Table component
│   │
│   ├── /pages                # Page components
│   │   ├── Dashboard.jsx     # Dashboard page
│   │   ├── DevicesPage.jsx   # Devices page
│   │   ├── AlertsPage.jsx    # Alerts page
│   │   └── ReportsPage.jsx   # Reports page
│   │
│   ├── /services             # API services
│   │   ├── api.js            # API client
│   │   ├── deviceService.js  # Device API service
│   │   ├── alertService.js   # Alert API service
│   │   └── reportService.js  # Report API service
│   │
│   ├── /store                # State management
│   │   ├── /actions          # Redux actions
│   │   ├── /reducers         # Redux reducers
│   │   └── store.js          # Redux store
│   │
│   ├── /utils                # Utility functions
│   │   ├── formatter.js      # Data formatters
│   │   ├── validator.js      # Form validators
│   │   └── theme.js          # Theme utilities
│   │
│   ├── /hooks                # Custom hooks
│   │   ├── useDevice.js      # Device hook
│   │   └── usePolling.js     # Polling hook
│   │
│   ├── /context              # React contexts
│   │   ├── AuthContext.jsx   # Authentication context
│   │   └── ThemeContext.jsx  # Theme context
│   │
│   ├── /routes               # Application routes
│   │   └── index.js          # Route definitions
│   │
│   ├── App.jsx               # Root component
│   ├── index.jsx             # Application entry point
│   └── config.js             # Frontend configuration
│
├── package.json              # Project dependencies
├── .env                      # Environment variables
└── README.md                 # Project readme
```

### 3.4 Database Structure (MongoDB Example)
```
mikrotik_monitoring
├── devices
│   ├── _id: ObjectId
│   ├── name: String
│   ├── model: String
│   ├── ipAddress: String
│   ├── credentials: Object
│   ├── group: String
│   ├── location: Object
│   ├── status: String
│   ├── lastSeen: Date
│   ├── tags: Array
│   └── metadata: Object
│
├── metrics
│   ├── _id: ObjectId
│   ├── deviceId: ObjectId
│   ├── timestamp: Date
│   ├── type: String
│   ├── value: Mixed
│   └── metadata: Object
│
├── alerts
│   ├── _id: ObjectId
│   ├── deviceId: ObjectId
│   ├── timestamp: Date
│   ├── severity: String
│   ├── message: String
│   ├── status: String
│   ├── assignedTo: ObjectId
│   └── metadata: Object
│
├── users
│   ├── _id: ObjectId
│   ├── username: String
│   ├── email: String
│   ├── password: String (hashed)
│   ├── role: String
│   ├── permissions: Array
│   └── preferences: Object
│
├── groups
│   ├── _id: ObjectId
│   ├── name: String
│   ├── description: String
│   ├── parentGroup: ObjectId
│   └── metadata: Object
│
├── reports
│   ├── _id: ObjectId
│   ├── name: String
│   ├── type: String
│   ├── parameters: Object
│   ├── schedule: Object
│   ├── createdBy: ObjectId
│   └── lastGenerated: Date
│
└── configurations
    ├── _id: ObjectId
    ├── deviceId: ObjectId
    ├── timestamp: Date
    ├── type: String
    ├── config: Object
    ├── version: String
    └── backupFile: String
```

### 3.5 Time-series Database Structure (InfluxDB Example)
```
mikrotik_metrics
├── measurements
│   ├── cpu_usage
│   │   ├── tags: [device_id, core, device_group]
│   │   └── fields: [value, max, min, avg]
│   │
│   ├── memory_usage
│   │   ├── tags: [device_id, type, device_group]
│   │   └── fields: [value, total, free, used]
│   │
│   ├── interface_traffic
│   │   ├── tags: [device_id, interface, direction]
│   │   └── fields: [bytes, packets, errors, drops]
│   │
│   ├── disk_usage
│   │   ├── tags: [device_id, disk, device_group]
│   │   └── fields: [value, total, free, used]
│   │
│   ├── temperature
│   │   ├── tags: [device_id, sensor, device_group]
│   │   └── fields: [value, critical_threshold]
│   │
│   ├── connection_count
│   │   ├── tags: [device_id, connection_type]
│   │   └── fields: [value, max_allowed]
│   │
│   ├── firewall_hits
│   │   ├── tags: [device_id, rule_id, chain]
│   │   └── fields: [packets, bytes, action]
│   │
│   └── ping_latency
│       ├── tags: [device_id, target, device_group]
│       └── fields: [value, packet_loss, jitter]
```